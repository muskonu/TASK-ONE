1.小写字母开头的函数只在本包内可见，大写字母开头的函数才能被其他包使用

2.函数不定参数 <name> ...<type>

3.若想传递任意类型的参数则为 <name> ...interface{ }

4.不定参数可理解为切片

5. input := bufio.NewScanner(os.Stdin)
该变量从程序的标准输入中读取内容。每次调用 input.Scan() ，即读入下一行，并移除行末的换行
符；读取的内容可以调用 input.Text() 得到。 Scan 函数在读到一行时返回 true ，不再有输入
时返回 false 。

6.如果初始化表达式被省略，那么将用零值初始化该变量。 数值类型变
量对应的零值是0，布尔类型变量对应的零值是false，字符串类型对应的零值是空字符串，接口或引
用类型（包括slice、指针、map、chan和函数）变量对应的零值是nil。数组或结构体等聚合类型
对应的零值是每个元素或字段都是对应该类型的零值。

7.简短变量声明语句只有对已经在同级词法域声明过的变量才和赋值操作语句等价，如果变量是在外部
词法域声明的，那么简短变量声明语句将会在当前词法域重新声明一个新的变量。

8.指针之间也是可以进行相等测试的，只有当它们指向同一个变量或全部是nil时才相等。

9.从每个包级的变量和每个当前运行函数的每一个局部变量开始，通过
指针或引用的访问路径遍历，是否可以找到该变量。如果不存在这样的访问路径，那么说明该变量是
不可达的，也就是说它是否存在并不会影响程序后续的计算结果。

10.自增和自减是语句，而不是表达式，因此 x = i++ 之类的表达式是错误的

11.在 if 里可以允许先运行一个表达式，取得变量后，再对其进行判断，比如第一个例子里代码也可以写成这样

import "fmt"

func main() {
    if age := 20;age > 18 {
        fmt.Println("已经成年了")
    }
}

12.Unicode字符rune类型是和int32等价的类型，同样byte也是uint8类型的等价类型

13.在Go语言中，%取模运算符的符号和被取模数的符号总是一致的，因此 -5%3 和 -5%-3 结果都是-2

14.字符串的值是不可变的：一个字符串包含的字节序列永远不会被改变，当然我们也可以给一个字符串
变量分配一个新字符串值。因为字符串是不可修改的，因此尝试修改字符串内部数据的操作也是被禁止的

				UTF8
1. 0xxxxxxx runes 0-127 (ASCII)
2. 110xxxxx 10xxxxxx 128-2047 (values <128 unused)
3. 1110xxxx 10xxxxxx 10xxxxxx 2048-65535 (values <2048 unused)
4. 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx 65536-0x10ffff (other values unused

15.如果是批量声明的常量，除了第一个外其它的常量右边的初始化表达式都可以省略，如果省略初始化
表达式则表示使用前面常量的初始化表达式写法，对应的常量类型也一样的  iota

16.在数组字面值中，如果在数组的长度位置出现的是“…”省略号，则表示数组的长度是根据初始化值的
个数来计算。q := [...]int{1, 2, 3}

17.内置的make函数创建一个指定元素类型、长度和容量的slice
 		make([]T, len, cap) // same as make([]T, cap)[:len]
在底层，make创建了一个匿名的数组变量，然后返回一个slice；只有通过返回的slice才能引用底
层匿名的数组变量。在第一种语句中，slice是整个数组的view。在第二个语句中，slice只引用了
底层数组的前len个元素，但是容量将包含整个的数组。额外的元素是留给未来的增长用的。

18.map使用内置的delete函数可以删除元素：delete(ages, "alice")

19.元素不在map中也没有关系；如果一个查找失败将返回value类型对应的零值

20.如果结构体的全部成员都是可以比较的，那么结构体也是可以比较的，那样的话两个结构体将可以使
用==或!=运算符进行比较。

21.结构体字面值并没有简短表示匿名成员的语法， 因此下面的语句都不能编译通过：
1. w = Wheel{8, 8, 5, 20} // compile error: unknown fields
2. w = Wheel{X: 8, Y: 8, Radius: 5, Spokes: 20} // compile error: unknown fields

22.Color bool `json:"color,omitempty"`Color成员的Tag还带了一个额外的omitempty选项，表示
当Go语言结构体成员为空或零值时不生成该JSON对象

23.通过定义合适的Go语言数据结构，我们可以选择性地解码JSON中感兴趣的成员。当Unmarshal函数调用返回，
slice将被只含有Title信息的值填充，其它JSON成员将被忽略。
	1. var titles []struct{ Title string }
	2. if err := json.Unmarshal(data, &titles); err != nil {
	3. log.Fatalf("JSON unmarshaling failed: %s", err)
	4. }
	5. fmt.Println(titles) // "[{Casablanca} {Cool Hand Luke} {Bullitt}]"
